language: cpp
os: 
    - linux
    - osx
dist: trusty
compiler:
    - gcc
    - clang
env:
    - TEST_SUITE=unit
    - TEST_SUITE=sandbox
    - TEST_SUITE=paper
    - TEST_SUITE=elliptic_drop
    - TEST_SUITE=nair_jablonowski_2008
    - TEST_SUITE=UWLCM
    - TEST_SUITE=pbl

matrix:
    include:
        - os: osx
          sudo: false
        - os: linux
          sudo: required
          services:
            - docker
    exclude:
        - os: osx
          compiler: gcc
        
        - os: osx
          env: TEST_SUITE=pbl # pbl not tested on osx

        - compiler: clang
          env: TEST_SUITE=UWLCM # UWLCM is not tested on clang yet

osx_image: xcode8

before_install:
    # define a compiler variable for use in if statements
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then export COMPILER=clang++; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'g++'     ]]; then export COMPILER=g++; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then export COMPILER=clang++; fi # only clang on osx

    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then export apt_get_install="apt-get install --no-install-recommends -y"; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew update; fi

    # fixing broken OSX gzip tools
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then export PATH=/usr/local/bin:$PATH; fi # so that brew-installed ones are first
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install gzip; fi
     
    # to avoid problems with plotting by paraview on Travis
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then unset DISPLAY; fi 

    - export make_j="make -j 2"

    # testing both Python 2 and 3 on Linux (unrelated to compiler choice!)
    - export PYVER="2"
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'g++' && $TEST_SUITE != 'UWLCM' ]]; then PYVER=3; fi
 
install:
    # silence the gazillion warnings coming from blitz headers when using the osx clang
    - if [[ $TRAVIS_OS_NAME == 'osx' && $COMPILER == 'clang++' ]]; then export CXXFLAGS="-Wno-parentheses ${CXXFLAGS}"; fi

    # redefine CXX to the actual version used
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'clang++' ]]; then export CXX=clang++-4.0; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $COMPILER == 'g++'     ]]; then export CXX=g++-6; fi

    # blitz
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install blitz; fi

    # hdf5
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install hdf5 --with-cxx; fi

    # gnuplot-iostream
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install gnuplot; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo wget -O /usr/local/include/gnuplot-iostream.h https://raw.githubusercontent.com/dstahlke/gnuplot-iostream/master/gnuplot-iostream.h; fi

    # h5py
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install h5py; fi 

    # scipy 
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install scipy; fi 

    # matplotlib
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install matplotlib; fi

before_script:
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then docker build --build-arg PYVER=$PYVER -t libmpdataxx .; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then export docker_run="docker run -e apt_get_install -e make_j -e CXX -e COMPILER -e TRAVIS_OS_NAME -t libmpdataxx"; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then export docker_run=""; fi
script:
    # libmpdata++
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd libmpdata++; fi 
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then mkdir build; fi 
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd build; fi 
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cmake ..; fi 
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then cd ../..; fi 

    # compiling and running all unit tests in Debug & Release modes
    - if [[ $TEST_SUITE == 'unit' ]]; then $docker_run bash ./.travis_scripts/unit.sh; fi

    # compiling and running selected paper tests in Debug mode
    - if [[ $TEST_SUITE == 'paper' ]]; then $docker_run bash ./.travis_scripts/paper.sh; fi

    # compiling all sandbox tests in Release mode
    - if [[ $TEST_SUITE == 'sandbox' ]]; then $docker_run bash ./.travis_scripts/sandbox.sh; fi

    - if [[ $TEST_SUITE == 'elliptic_drop' ]]; then $docker_run bash ./.travis_scripts/elliptic_drop.sh; fi

    # running tests from UWLCM in Release mode
    - if [[ $TEST_SUITE == 'UWLCM' ]]; then $docker_run bash ./.travis_scripts/UWLCM.sh; fi # with '.' to pass env vars
    
    # compiling and running tests from Nair & Jablonowski 2008 MWR paper in Release mode
    - if [[ $TEST_SUITE == 'nair_jablonowski_2008' ]]; then $docker_run bash ./.travis_scripts/nair_jablonowski_2008.sh; fi
    
    # running pbl tests in Release mode
    - if [[ $TEST_SUITE == 'pbl' ]]; then $docker_run bash ./.travis_scripts/pbl.sh; fi
