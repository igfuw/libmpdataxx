language: cpp
os: 
    - linux
    - osx
compiler:
    - gcc
    - clang
matrix:
    exclude:
        - os: osx
          compiler: gcc

osx_image: xcode611

before_install:
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu/ trusty main universe multiverse"; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo apt-get update; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then export apt_get_install="apt-get install --no-install-recommends -t trusty -y"; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew update; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo brew tap homebrew/science; fi

    # fixing broken OSX gzip tools
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then export PATH=/usr/local/bin:$PATH; fi # so that brew-installed ones are first
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew tap homebrew/dupes; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install gzip; fi
     
    # to avoid problems with plotting by paraview on Travis
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then unset DISPLAY; fi 

    # you may not believe it, but GCC (4.8.2) is giving ICEs otherwise!
    - export make_j="make -j 2"
    - if [[ $CXX == 'g++' ]]; then export make_j="make"; fi

    # testing both Python 2 and 3 on Linux (unrelated to compiler choice!)
    - export PY3DEB=""
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'g++' ]]; then PY3DEB=3; fi
    - if [[ $PY3DEB != '' ]]; then sudo apt-get install python3-dev; fi
 
install:
    # compilers
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then sudo $apt_get_install clang-3.5; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'g++'     ]]; then sudo $apt_get_install g++; fi
    #- if [[ $TRAVIS_OS_NAME == 'osx' && $CXX == 'g++' ]]; then brew install gcc48; fi   # would need a gcc-compiled boost ... (see note below)

    # boost
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libboost-thread-dev libboost-timer-dev; fi
    #- if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew reinstall boost --c++11; fi          # ...what takes too long :(

    # cmake 
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install cmake; fi

    # blitz
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install blitz; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libblitz0-dev; fi

    # hdf5
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libhdf5-7; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libpango-1.0-0 libpangocairo-1.0-0 libhdf5-dev; fi
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libhdf5-serial-dev hdf5-tools; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install hdf5 --with-cxx; fi

    # gnuplot-iostream
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install gnuplot-nox libgnuplot-iostream-dev; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install gnuplot; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then wget -O /usr/local/include/gnuplot-iostream.h https://raw.githubusercontent.com/dstahlke/gnuplot-iostream/master/gnuplot-iostream.h; fi

    # h5py
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install python$PY3DEB-h5py; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo pip install h5py; fi 

    # scipy 
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install python$PY3DEB-scipy; fi

    # matplotlib
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install python$PY3DEB-matplotlib; fi

    # make Python 3 the default if requested
    - if [[ $PY3DEB != '' ]]; then sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 10; fi

script:
    # libmpdata++
    - cd libmpdata++
    - mkdir build
    - cd build
    - cmake ..
    - cd ../..

    # compiling and running all unit tests in Debug mode
    - cd tests/unit
    - mkdir build 
    - cd build
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ../; fi # Travis default is not the packaged one
    - if [[ $TRAVIS_OS_NAME == 'osx' && $CXX == 'g++' ]]; then cmake -DCMAKE_CXX_COMPILER=g++-4.8 ../; fi # the one from homebrew
    - cmake -DCMAKE_BUILD_TYPE=Debug ../
    - VERBOSE=1 $make_j
    - OMP_NUM_THREADS=4 make test || cat Testing/Temporary/LastTest.log / # "/" intentional! (just to make cat exit with an error code)
    - cd ../../..

    # compiling and running selected paper tests in Debug mode
    - cd tests/paper_2015_GMD
    - mkdir build
    - cd build
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ../; fi # Travis default is not the packaged one
    - if [[ $TRAVIS_OS_NAME == 'osx' && $CXX == 'g++' ]]; then cmake -DCMAKE_CXX_COMPILER=g++-4.8 ../; fi # the one from homebrew
    - cmake -DCMAKE_BUILD_TYPE=Debug ../
    - VERBOSE=1 make -C 6_coupled_harmosc
    - OMP_NUM_THREADS=4 make -C 6_coupled_harmosc test || cat 6_coupled_harmosc/Testing/Temporary/LastTest.log / # "/" intentional! (just to make cat exit with an error code)

    # compiling everything in the Release mode
    - cmake -DCMAKE_BUILD_TYPE=Release ../
    - VERBOSE=1 $make_j

    # running all paper tests in Release mode 
    #- OMP_NUM_THREADS=1 make test || cat Testing/Temporary/LastTest.log / # "/" intentional! (just to make cat exit with an error code)
    - OMP_NUM_THREADS=4 make test || cat Testing/Temporary/LastTest.log / # "/" intentional! (just to make cat exit with an error code)
    - cd ../../..

    # compiling but _not_ running sandbox tests 
    - cd tests/sandbox
    - mkdir build
    - cd build
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ../; fi # Travis default is not the packaged one
    - if [[ $TRAVIS_OS_NAME == 'osx' && $CXX == 'g++' ]]; then cmake -DCMAKE_CXX_COMPILER=g++-4.8 ../; fi # the one from homebrew
    - cmake ..
    - VERBOSE=1 $make_j
    - cd ../../..

    # installing
    - cd libmpdata++/build
    - sudo make install
    - cd ../..

    # shallow-water-elliptic-drop
    - git clone --depth=1 git://github.com/igfuw/shallow-water-elliptic-drop.git
    - cd shallow-water-elliptic-drop/numerical
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release #TODO: Debug mode?
    - make
    #- ./spreading_drop_2d_el 
    # TODO: make test!
    - cd ../../..
    
    # making Python 2 back the default if needed - TODO: support Python3 in libcloudph++
    - if [[ $PY3DEB != '' ]]; then sudo update-alternatives --remove python /usr/bin/python3; fi
    - if [[ $PY3DEB != '' ]]; then sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 10; fi

    # libcloudph++'s dependencies
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libboost-python-dev python-numpy libthrust-dev; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew install boost-python; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then git clone --depth=1 git://github.com/thrust/thrust.git; fi
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then sudo ln -s `pwd`/thrust/thrust /usr/local/include/thrust; fi

    # libcloudph++ (needed by icicle, skipping tests and CUDA build)
    - git clone --depth=1 git://github.com/igfuw/libcloudphxx.git
    - cd libcloudphxx
    - mkdir build 
    - cd build
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ../; fi # Travis default is not the packaged     one
    - if [[ $TRAVIS_OS_NAME == 'osx' && $CXX == 'g++' ]]; then cmake -DCMAKE_CXX_COMPILER=g++-4.8 ../; fi # the one from homebrew
    - cmake -DCMAKE_BUILD_TYPE=Release ../ 
    - make 
    - sudo make install
    - cd ../..

    ## icicle (no tests - just testing if any changes in libmpdata's API did not break icicle)
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then sudo $apt_get_install libboost-program-options-dev; fi
    - cd libcloudphxx/tests/paper_GMD_2015
    - mkdir build 
    - cd build
    - if [[ $TRAVIS_OS_NAME == 'linux' && $CXX == 'clang++' ]]; then cmake -DCMAKE_CXX_COMPILER=/usr/bin/clang++ ../; fi # Travis default is not the packaged     one
    - if [[ $TRAVIS_OS_NAME == 'osx' && $CXX == 'g++' ]]; then cmake -DCMAKE_CXX_COMPILER=g++-4.8 ../; fi # the one from homebrew
    - cmake -DCMAKE_BUILD_TYPE=Release ../ 
    - make
